#!/usr/bin/python

DOCUMENTATION = '''
---
module: asm_add_server_technologies
author: Pedro Correia (@correiap)
version_added: "1.0"
short_description: Get the SelfLink associated with an ASM Server Technology
description:
    - This module retrives the SelfLink associated with an ASM Server Technology and adds it to an ASM Policy. It takes the Management IP or Hostname of the F5 BIG-IP Device,
      the Authentication Token, the ASM Policy ID and the name of the Server Technology. Then it performs a loop to fetch the SelfLink based on the Server Technology Name and adds it to the ASM Policy
references:
      F5 iControl REST API User Guide Version 13.0
requirements:
    - none
options:
    host:
        description:
            - The IP address or hostname of the F5 appliance
        required: true
    token:
        description:
            - F5 Authentication Token
        required: true
    server_technology:
        description:
            - Server Technology Name
        required: true
'''

EXAMPLES = '''
    - name: Get Server Technology SelfLink
      asm_server_technologies:
        host: "{{ HOSTNAME }}"
        token: "{{ TOKEN }}"
        asm_hash: "{{ ASM_HASH }}"
        server_technology: "{{ ST_NAME }}"
	  register: st_selflink
	  
    - name: Assign ASM Hash to Variable 
      set_fact:
        ASM_HASH: "{{asm_hash.ASM_Hash}}"
'''


import sys
import time
import json
import requests



from ansible.module_utils.basic import *

def genSTURI (mgmtip):
    
    URI = "https://" + mgmtip + "/mgmt/tm/asm/server-technologies"
    
    return (URI)

def genASMURI (mgmtip, asm_hash):
    
    URI = "https://" + mgmtip + "/mgmt/tm/asm/policies/" + asm_hash + "/server-technologies"
    
    return (URI)

def getSTInfo (URI, token):

    headers = {'content-type': "application/json", 'x-f5-auth-token': token}

    r = requests.get(URI, headers=headers, verify=False)

    content = r.json()

    return (content)

def getSTSelfLink (STInfo, st_name):
    
    count = 0
    st_selflink = ""

    while st_name != STInfo['items'][count]['serverTechnologyDisplayName']:
            count +=1
    st_selflink = STInfo['items'][count]['selfLink']
    
    return st_selflink

def addST (URI, token, st_selflink):

    headers = {'content-type': "application/json", 'x-f5-auth-token': token}

    payload = {"serverTechnologyReference": {"link": st_selflink}}

    r = requests.post(URI, headers=headers, data=json.dumps(payload), verify=False) 

    content = r.json()

    return (content)

def main():
	
	module_args = AnsibleModule(
        	argument_spec = dict(
            		mgmtip = dict(required=True),
            		token = dict(required=True),
                    	asm_hash = dict(required=True),
            		server_technology  = dict(required=True)
         	),
        	check_invalid_arguments=False,
        	add_file_common_args=True
	)
    
    	result = dict(
        	changed=False,
        	original_message='',
        	message=''
    	)



    	#function to generate URI to get Server Technology Self Link
	    URI = genSTURI (module_args.params["mgmtip"])

	    #GET Server Technologies information and assign to variable
	    STInfo = getSTInfo (URI, module_args.params["token"])

	    #Scan Server Technologies and return Self Link
	    STSelfLink = getSTSelfLink (STInfo, module_args.params["server_technology"])

    	#Add Server Technology to existing ASM Policy
    	URL = genASMURI (module_args.params["mgmtip"], module_args.params["asm_hash"])
    	Assign_ST = addST (URL, module_args.params["token"], STSelfLink)

	module_args.exit_json(changed=False, ST_SELFLINK=Assign_ST)

if __name__ == '__main__':
    main()
